# core_library/redteam_commander/commander_state.py
from pathlib import Path
from typing import Any, Dict, List

from typing_extensions import NotRequired, TypedDict

class RedTeamCommanderState(TypedDict):
    """
    Defines the memory or "state" for the RedTeamCommander agent's graph.
    This object is passed between each node in the workflow.
    """
    # --- INPUTS ---
    # The initial configuration provided by the user.
    target_config: NotRequired[Dict[str, Any]]
    #for flexibility add key and model to state.
    openai_api_key: NotRequired[str]
    default_model: NotRequired[str] 
    
    # --- INTERMEDIATE DATA ---
    # This will hold the initialized RAG vector store object. 'Any' is used
    # because the specific type will depend on the vector store library (e.g., Chroma, FAISS).
    code_index: NotRequired[Any]
    
    # The first draft of the agent's capabilities, generated by the LLM.
    draft_description: NotRequired[str]

    # The feedback and corrections provided by the human user.
    human_feedback: NotRequired[str]

    # The final, authoritative context combining the draft and human feedback.
    final_context: NotRequired[str]

    # A structured list of the generated user personas.
    generated_personas: NotRequired[List[Dict[str, Any]]]

    # --- FINAL OUTPUT ---
    # The path to the newly created, auto-generated test cases file.
    generated_test_cases_filepath: NotRequired[Path]